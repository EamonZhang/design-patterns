/**
 * Created by xianwei on 2015/11/26.
 * 简单工厂示例代码
 * 1. Java中的接口
 *      接口就是一种特殊的抽象类
 * 2. 接口使用来干什么
 *      通常用接口来实现类的外观，就相当于一份契约，根据外部应用需要的功能，约定
 *      实现类应该要实现的功能
 * 3. 接口的思想-----“封装隔离”
 * 4. 使用接口的好处
 *      只要接口不变，内部实现的变化就不会影响到外部应用，从而使得系统更灵活，具有
 *      更好的扩展性和可维护性
 *      接口是系统可插拔性的具体保证
 * 5. 接口和抽象类的选择
 *      优先选择接口
 *      如下情况选择抽象类：
 *          既要定义子类的行为，又要为子类提供公共的功能
 * 面向接口编程
 *      面向接口编程是Java编程中的一个重要原则。在Java程序设计里面，非常讲究层的划分
 *      和模块的划分。
 *      在一个层内部的各个模块的交互也要通过接口、
 *      不管是一层还是一个模块或者一个组件，都是一个被接口隔离的整体
 * 简单工厂
 * 1. 简单工厂的功能
 *      用来创建的接口、抽象类或者是普通类的实例
 * 2. 静态工厂
 *      通常把简单工厂类实现成一个工具类(构造方法私有)，直接使用静态方法就可以了，
 *      也就是说简单工厂的方法通常都是静态的，所以也北昌尾静态工厂
 * 3. 万能工厂
 *      一个简单工厂理论上可以用来构造任何对象，所以又称之为“万能工厂”
 * 4. 简单工厂创建对象的范围
 *      建议控制在一个独立的组件级别或者一个模块级别
 * 5. 简单工厂的调用顺序
 * 6. 简单工厂命名建议
 *      （1）类名建议为“模块名称+Factory”，
 *      （2）方法名称通常为“get+接口名称”或者是“create+接口名称”
 *      （3）不建议吧方法名命名为“new+接口名称”
 *简单工厂方法的写法
 *  简单工厂方法的内部主要实现的功能是“选择合适的实现类”来创建实例对象
 *      选择参数的来源
 *          1. client
 *          2. 系统配置文件
 *          3.系统自身，比如运行期间的某个值
 *      注意：如果是从客户端调用工厂的时候，传入选择的参数，这就说明客户端必须知道
 *          每个参数的含义，也需要理解每个参数对应的功能处理。这就要求必须在一定程
 *          度上，想客户端暴露一定的内部实现细节
 *可配置的简单工厂
 *  使用反射加上配置文件，来实现添加新的实现类后，无需修改代码，就能吧这个新的实现类
 *  加入到应用中国
 *简单工厂的优缺点
 *  1. 帮助封装
 *  2. 解耦
 *  3. 可能增加客户端的复杂度
 *  4. 不方便扩展子工厂
 *
 *
 */
package com.alby.dp.factory.simplefactory;