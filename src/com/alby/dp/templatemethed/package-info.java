/**
 * Created by xianwei on 2015/12/9.
 * 模板方法模式    Template Methed
 * 定义：
 *      定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法
 *    的结构即可重定义算法的某些特定步骤。
 *
 * 登录控制：
 *      不使用模式的解决方案：
 *              普通用户登录：com.alby.dp.templatemethed.example2
 *              工作人员登录：com.alby.dp.templatemethed.example3
 *      使用模式的解决方案：
 *                  com.alby.dp.templatemethed.example4
 * 可以被子类扩展的方法称为“钩子方法”
 *      扩展登录控制
 *
 * 模板方法的写法
 *      通常在模板里面包含如下操作类型：
 *     1：模板方法：就是定义算法骨架的方法
 *     2：具体的操作：在模板中直接实现某些步骤的方法，通常这些步骤的实现算法是固定的，而且是不
 *      怎么变化的，因此就可以当作公共功能实现在模板里面，如果不需要提供给子类访问这些方法的话，
 *      还可以是private的。这样一来，子类的实现就相对简单些。如果是子类需要访问，可以把这些方法
 *      非你故意为protected final的，因为通常情况下，这些实现不能够被子类覆盖和改变了。
 *     3：具体的AbstractClass操作：在模板中实现某些公共功能，可以提供给子类使用，一般不是具体的
 *      算法步奏的实现，只是一些辅助的公共功能
 *      4：原语操作：就是在模板中定义的抽象操作，通常是模板方法需要调用的操作，是必需的操作，而且
 *          而且子啊父类中还没有办法确定下来如何实现，需要子类来真正实现的方法
 *      5：钩子操作：在模板中定义，并提供默认实现的操作。这些方法通常被视为可扩展的点，但不是必须
 *          的，子类可以有选择的覆盖这些方法，以提供新的实现来扩展功能。比如：模板方法中定义了5
 *          步操作，但是根据需要，某一种具体的实现只需要其中的1、2、3这几个步骤，因此他就需要覆盖
 *          实现1、2、3这几个步骤对应的方法，那么4和5步骤对应的方法怎么办呢，由于有默认实现，那就
 *          不管了，也就说钩子操作是可以被扩展的点，但不是必须的
 *       6：Factory Method：在模板方法中，如果需要得到某些对象实例的话，可以考虑通过工厂方法模式来
 *          获取，把具体的构建对象的实现延迟到子类中去
 *  Java回调与模板方法
 *      com.alby.dp.templatemethed.example6
 *  典型应用：排序
 *
 *
 *
 */
package com.alby.dp.templatemethed;